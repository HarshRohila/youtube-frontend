/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Comment, Comments, SearchResult, Source, Stream } from "./YoutubeApi";
import { MatchResults, RouterHistory } from "@stencil-community/router";
import { NotificationModel } from "./lib/notifier";
import { CommentsViewProps, ShareFormState } from "./lib/redux/video-page";
import { ServerInstance } from "./server-instance/serverInstanceApi";
import { IAppError } from "./lib/redux/global";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import { IconDefinition as IconDefinition1 } from "@fortawesome/fontawesome-svg-core";
export namespace Components {
    interface AComment {
        "comment": Comment;
    }
    interface APlaylist {
        "history": RouterHistory;
    }
    interface AppHeader {
        "history": RouterHistory;
    }
    interface AppRoot {
        "notification": NotificationModel;
    }
    interface CardVideo {
        "deleteCallback"?: (video: SearchResult) => void;
        "preloadStream": boolean;
        "video": SearchResult;
    }
    interface CommentsView {
        "areCommentsLoading": boolean;
        "comments": Comments;
        "commentsView": CommentsViewProps;
    }
    interface DropdownServer {
        "serverInstances": ServerInstance[];
    }
    interface ErrorPage {
        "error": IAppError;
    }
    interface FormPlaylist {
    }
    interface IconBtn {
        "disabled": boolean;
        "icon": IconDefinition;
        "label": string;
        "size": "small" | "medium";
        "type": "primary" | "secondary";
    }
    interface LiServerInstance {
        "serverInsance": ServerInstance;
    }
    interface LoadingPage {
    }
    interface MobileView {
    }
    interface PageHeader {
        "history": RouterHistory;
    }
    interface SearchPage {
        "history": RouterHistory;
    }
    interface SettingsBtn {
        "history": RouterHistory;
    }
    interface SettingsPage {
        "history": RouterHistory;
    }
    interface ShareForm {
        "copiedLink": string;
        "currentTimeEnabled": boolean;
        "shareForm": ShareFormState | undefined;
        "video": Stream;
    }
    interface SharedContentReceiver {
        "history": RouterHistory;
    }
    interface TrendingPage {
        "history": RouterHistory;
    }
    interface VideoPage {
        "history": RouterHistory;
        "isCommentsOpen": boolean;
        "match": MatchResults;
        "shareForm": ShareFormState | undefined;
    }
    interface VideoPlayer {
        "currentTime": (newTime?: number) => Promise<number>;
        "skipSegments": number[][];
        "sources": Source[];
    }
    interface XIcon {
        "icon": IconDefinition;
        "mask"?: IconDefinition;
        "size"?: string;
        "spin": boolean;
    }
    interface XNotification {
        "data": NotificationModel;
    }
}
declare global {
    interface HTMLACommentElement extends Components.AComment, HTMLStencilElement {
    }
    var HTMLACommentElement: {
        prototype: HTMLACommentElement;
        new (): HTMLACommentElement;
    };
    interface HTMLAPlaylistElement extends Components.APlaylist, HTMLStencilElement {
    }
    var HTMLAPlaylistElement: {
        prototype: HTMLAPlaylistElement;
        new (): HTMLAPlaylistElement;
    };
    interface HTMLAppHeaderElement extends Components.AppHeader, HTMLStencilElement {
    }
    var HTMLAppHeaderElement: {
        prototype: HTMLAppHeaderElement;
        new (): HTMLAppHeaderElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLCardVideoElement extends Components.CardVideo, HTMLStencilElement {
    }
    var HTMLCardVideoElement: {
        prototype: HTMLCardVideoElement;
        new (): HTMLCardVideoElement;
    };
    interface HTMLCommentsViewElement extends Components.CommentsView, HTMLStencilElement {
    }
    var HTMLCommentsViewElement: {
        prototype: HTMLCommentsViewElement;
        new (): HTMLCommentsViewElement;
    };
    interface HTMLDropdownServerElement extends Components.DropdownServer, HTMLStencilElement {
    }
    var HTMLDropdownServerElement: {
        prototype: HTMLDropdownServerElement;
        new (): HTMLDropdownServerElement;
    };
    interface HTMLErrorPageElement extends Components.ErrorPage, HTMLStencilElement {
    }
    var HTMLErrorPageElement: {
        prototype: HTMLErrorPageElement;
        new (): HTMLErrorPageElement;
    };
    interface HTMLFormPlaylistElement extends Components.FormPlaylist, HTMLStencilElement {
    }
    var HTMLFormPlaylistElement: {
        prototype: HTMLFormPlaylistElement;
        new (): HTMLFormPlaylistElement;
    };
    interface HTMLIconBtnElement extends Components.IconBtn, HTMLStencilElement {
    }
    var HTMLIconBtnElement: {
        prototype: HTMLIconBtnElement;
        new (): HTMLIconBtnElement;
    };
    interface HTMLLiServerInstanceElement extends Components.LiServerInstance, HTMLStencilElement {
    }
    var HTMLLiServerInstanceElement: {
        prototype: HTMLLiServerInstanceElement;
        new (): HTMLLiServerInstanceElement;
    };
    interface HTMLLoadingPageElement extends Components.LoadingPage, HTMLStencilElement {
    }
    var HTMLLoadingPageElement: {
        prototype: HTMLLoadingPageElement;
        new (): HTMLLoadingPageElement;
    };
    interface HTMLMobileViewElement extends Components.MobileView, HTMLStencilElement {
    }
    var HTMLMobileViewElement: {
        prototype: HTMLMobileViewElement;
        new (): HTMLMobileViewElement;
    };
    interface HTMLPageHeaderElement extends Components.PageHeader, HTMLStencilElement {
    }
    var HTMLPageHeaderElement: {
        prototype: HTMLPageHeaderElement;
        new (): HTMLPageHeaderElement;
    };
    interface HTMLSearchPageElement extends Components.SearchPage, HTMLStencilElement {
    }
    var HTMLSearchPageElement: {
        prototype: HTMLSearchPageElement;
        new (): HTMLSearchPageElement;
    };
    interface HTMLSettingsBtnElement extends Components.SettingsBtn, HTMLStencilElement {
    }
    var HTMLSettingsBtnElement: {
        prototype: HTMLSettingsBtnElement;
        new (): HTMLSettingsBtnElement;
    };
    interface HTMLSettingsPageElement extends Components.SettingsPage, HTMLStencilElement {
    }
    var HTMLSettingsPageElement: {
        prototype: HTMLSettingsPageElement;
        new (): HTMLSettingsPageElement;
    };
    interface HTMLShareFormElement extends Components.ShareForm, HTMLStencilElement {
    }
    var HTMLShareFormElement: {
        prototype: HTMLShareFormElement;
        new (): HTMLShareFormElement;
    };
    interface HTMLSharedContentReceiverElement extends Components.SharedContentReceiver, HTMLStencilElement {
    }
    var HTMLSharedContentReceiverElement: {
        prototype: HTMLSharedContentReceiverElement;
        new (): HTMLSharedContentReceiverElement;
    };
    interface HTMLTrendingPageElement extends Components.TrendingPage, HTMLStencilElement {
    }
    var HTMLTrendingPageElement: {
        prototype: HTMLTrendingPageElement;
        new (): HTMLTrendingPageElement;
    };
    interface HTMLVideoPageElement extends Components.VideoPage, HTMLStencilElement {
    }
    var HTMLVideoPageElement: {
        prototype: HTMLVideoPageElement;
        new (): HTMLVideoPageElement;
    };
    interface HTMLVideoPlayerElement extends Components.VideoPlayer, HTMLStencilElement {
    }
    var HTMLVideoPlayerElement: {
        prototype: HTMLVideoPlayerElement;
        new (): HTMLVideoPlayerElement;
    };
    interface HTMLXIconElement extends Components.XIcon, HTMLStencilElement {
    }
    var HTMLXIconElement: {
        prototype: HTMLXIconElement;
        new (): HTMLXIconElement;
    };
    interface HTMLXNotificationElement extends Components.XNotification, HTMLStencilElement {
    }
    var HTMLXNotificationElement: {
        prototype: HTMLXNotificationElement;
        new (): HTMLXNotificationElement;
    };
    interface HTMLElementTagNameMap {
        "a-comment": HTMLACommentElement;
        "a-playlist": HTMLAPlaylistElement;
        "app-header": HTMLAppHeaderElement;
        "app-root": HTMLAppRootElement;
        "card-video": HTMLCardVideoElement;
        "comments-view": HTMLCommentsViewElement;
        "dropdown-server": HTMLDropdownServerElement;
        "error-page": HTMLErrorPageElement;
        "form-playlist": HTMLFormPlaylistElement;
        "icon-btn": HTMLIconBtnElement;
        "li-server-instance": HTMLLiServerInstanceElement;
        "loading-page": HTMLLoadingPageElement;
        "mobile-view": HTMLMobileViewElement;
        "page-header": HTMLPageHeaderElement;
        "search-page": HTMLSearchPageElement;
        "settings-btn": HTMLSettingsBtnElement;
        "settings-page": HTMLSettingsPageElement;
        "share-form": HTMLShareFormElement;
        "shared-content-receiver": HTMLSharedContentReceiverElement;
        "trending-page": HTMLTrendingPageElement;
        "video-page": HTMLVideoPageElement;
        "video-player": HTMLVideoPlayerElement;
        "x-icon": HTMLXIconElement;
        "x-notification": HTMLXNotificationElement;
    }
}
declare namespace LocalJSX {
    interface AComment {
        "comment"?: Comment;
    }
    interface APlaylist {
        "history"?: RouterHistory;
    }
    interface AppHeader {
        "history"?: RouterHistory;
    }
    interface AppRoot {
        "notification"?: NotificationModel;
    }
    interface CardVideo {
        "deleteCallback"?: (video: SearchResult) => void;
        "preloadStream"?: boolean;
        "video"?: SearchResult;
    }
    interface CommentsView {
        "areCommentsLoading"?: boolean;
        "comments"?: Comments;
        "commentsView"?: CommentsViewProps;
    }
    interface DropdownServer {
        "serverInstances"?: ServerInstance[];
    }
    interface ErrorPage {
        "error"?: IAppError;
    }
    interface FormPlaylist {
    }
    interface IconBtn {
        "disabled"?: boolean;
        "icon"?: IconDefinition;
        "label"?: string;
        "onBtnClicked"?: (event: CustomEvent<any>) => void;
        "size"?: "small" | "medium";
        "type"?: "primary" | "secondary";
    }
    interface LiServerInstance {
        "serverInsance"?: ServerInstance;
    }
    interface LoadingPage {
    }
    interface MobileView {
    }
    interface PageHeader {
        "history"?: RouterHistory;
    }
    interface SearchPage {
        "history"?: RouterHistory;
    }
    interface SettingsBtn {
        "history"?: RouterHistory;
    }
    interface SettingsPage {
        "history"?: RouterHistory;
    }
    interface ShareForm {
        "copiedLink"?: string;
        "currentTimeEnabled"?: boolean;
        "shareForm"?: ShareFormState | undefined;
        "video"?: Stream;
    }
    interface SharedContentReceiver {
        "history"?: RouterHistory;
    }
    interface TrendingPage {
        "history"?: RouterHistory;
    }
    interface VideoPage {
        "history"?: RouterHistory;
        "isCommentsOpen"?: boolean;
        "match"?: MatchResults;
        "shareForm"?: ShareFormState | undefined;
    }
    interface VideoPlayer {
        "onLoaded"?: (event: CustomEvent<{ player: Player }>) => void;
        "skipSegments"?: number[][];
        "sources"?: Source[];
    }
    interface XIcon {
        "icon"?: IconDefinition;
        "mask"?: IconDefinition;
        "size"?: string;
        "spin"?: boolean;
    }
    interface XNotification {
        "data"?: NotificationModel;
        "onTimedOut"?: (event: CustomEvent<void>) => void;
    }
    interface IntrinsicElements {
        "a-comment": AComment;
        "a-playlist": APlaylist;
        "app-header": AppHeader;
        "app-root": AppRoot;
        "card-video": CardVideo;
        "comments-view": CommentsView;
        "dropdown-server": DropdownServer;
        "error-page": ErrorPage;
        "form-playlist": FormPlaylist;
        "icon-btn": IconBtn;
        "li-server-instance": LiServerInstance;
        "loading-page": LoadingPage;
        "mobile-view": MobileView;
        "page-header": PageHeader;
        "search-page": SearchPage;
        "settings-btn": SettingsBtn;
        "settings-page": SettingsPage;
        "share-form": ShareForm;
        "shared-content-receiver": SharedContentReceiver;
        "trending-page": TrendingPage;
        "video-page": VideoPage;
        "video-player": VideoPlayer;
        "x-icon": XIcon;
        "x-notification": XNotification;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "a-comment": LocalJSX.AComment & JSXBase.HTMLAttributes<HTMLACommentElement>;
            "a-playlist": LocalJSX.APlaylist & JSXBase.HTMLAttributes<HTMLAPlaylistElement>;
            "app-header": LocalJSX.AppHeader & JSXBase.HTMLAttributes<HTMLAppHeaderElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "card-video": LocalJSX.CardVideo & JSXBase.HTMLAttributes<HTMLCardVideoElement>;
            "comments-view": LocalJSX.CommentsView & JSXBase.HTMLAttributes<HTMLCommentsViewElement>;
            "dropdown-server": LocalJSX.DropdownServer & JSXBase.HTMLAttributes<HTMLDropdownServerElement>;
            "error-page": LocalJSX.ErrorPage & JSXBase.HTMLAttributes<HTMLErrorPageElement>;
            "form-playlist": LocalJSX.FormPlaylist & JSXBase.HTMLAttributes<HTMLFormPlaylistElement>;
            "icon-btn": LocalJSX.IconBtn & JSXBase.HTMLAttributes<HTMLIconBtnElement>;
            "li-server-instance": LocalJSX.LiServerInstance & JSXBase.HTMLAttributes<HTMLLiServerInstanceElement>;
            "loading-page": LocalJSX.LoadingPage & JSXBase.HTMLAttributes<HTMLLoadingPageElement>;
            "mobile-view": LocalJSX.MobileView & JSXBase.HTMLAttributes<HTMLMobileViewElement>;
            "page-header": LocalJSX.PageHeader & JSXBase.HTMLAttributes<HTMLPageHeaderElement>;
            "search-page": LocalJSX.SearchPage & JSXBase.HTMLAttributes<HTMLSearchPageElement>;
            "settings-btn": LocalJSX.SettingsBtn & JSXBase.HTMLAttributes<HTMLSettingsBtnElement>;
            "settings-page": LocalJSX.SettingsPage & JSXBase.HTMLAttributes<HTMLSettingsPageElement>;
            "share-form": LocalJSX.ShareForm & JSXBase.HTMLAttributes<HTMLShareFormElement>;
            "shared-content-receiver": LocalJSX.SharedContentReceiver & JSXBase.HTMLAttributes<HTMLSharedContentReceiverElement>;
            "trending-page": LocalJSX.TrendingPage & JSXBase.HTMLAttributes<HTMLTrendingPageElement>;
            "video-page": LocalJSX.VideoPage & JSXBase.HTMLAttributes<HTMLVideoPageElement>;
            "video-player": LocalJSX.VideoPlayer & JSXBase.HTMLAttributes<HTMLVideoPlayerElement>;
            "x-icon": LocalJSX.XIcon & JSXBase.HTMLAttributes<HTMLXIconElement>;
            "x-notification": LocalJSX.XNotification & JSXBase.HTMLAttributes<HTMLXNotificationElement>;
        }
    }
}
